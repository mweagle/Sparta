<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sparta - AWS Lambda Microservices</title>
    <link>/reference/operations/</link>
    <description>Recent content on Sparta - AWS Lambda Microservices</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 01 Dec 2018 05:17:18 +0000</lastBuildDate><atom:link href="/reference/operations/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Magefiles</title>
      <link>/reference/operations/magefile/</link>
      <pubDate>Wed, 28 Nov 2018 16:17:43 +0000</pubDate>
      
      <guid>/reference/operations/magefile/</guid>
      <description>Magefile To support cross platform development and usage, Sparta uses magefiles rather than Makefiles. Most projects can start with the magefile.go sample below. The Magefiles provide a discoverable CLI, but are entirely optional. go run main.go XXXX style invocation remains available as well.
Default Sparta magefile.go This magefile.go can be used, unchanged, for most standard Sparta projects.
// +build mage  // File: magefile.go  package main import ( spartaMage &amp;#34;github.</description>
    </item>
    
    <item>
      <title>CloudWatch Alarms</title>
      <link>/reference/operations/cloudwatch_alarms/</link>
      <pubDate>Mon, 22 Jan 2018 21:49:38 +0000</pubDate>
      
      <guid>/reference/operations/cloudwatch_alarms/</guid>
      <description>The CloudWatchErrorAlarmDecorator associates a CloudWatch alarm and destination with your Lambda function.
Sample usage:
lambdaFn, _ := sparta.NewAWSLambda(&amp;#34;Hello World&amp;#34;, helloWorld, sparta.IAMRoleDefinition{}) lambdaFn.Decorators = []sparta.TemplateDecoratorHandler{ spartaDecorators.CloudWatchErrorAlarmDecorator(1, 1, 1, gocf.String(&amp;#34;MY_SNS_ARN&amp;#34;)), } </description>
    </item>
    
    <item>
      <title>CloudWatch Dashboard</title>
      <link>/reference/operations/cloudwatch_dashboard/</link>
      <pubDate>Mon, 22 Jan 2018 21:49:38 +0000</pubDate>
      
      <guid>/reference/operations/cloudwatch_dashboard/</guid>
      <description>The DashboardDecorator creates a CloudWatch Dashboard that produces a single CloudWatch Dashboard to summarize your stack&amp;rsquo;s behavior.
Sample usage:
func workflowHooks(connections *service.Connections, lambdaFunctions []*sparta.LambdaAWSInfo, websiteURL *gocf.StringExpr) *sparta.WorkflowHooks { // Setup the DashboardDecorator lambda hook  workflowHooks := &amp;amp;sparta.WorkflowHooks{ ServiceDecorators: []sparta.ServiceDecoratorHookHandler{ spartaDecorators.DashboardDecorator(lambdaFunctions, 60), serviceResourceDecorator(connections, websiteURL), }, } return workflowHooks } A sample dashboard for the SpartaGeekwire project is:
Related to this, see the recently announced AWS Lambda Application Dashboard.</description>
    </item>
    
    <item>
      <title>CodeDeploy Service Update</title>
      <link>/reference/operations/codedeploy_service_update/</link>
      <pubDate>Mon, 22 Jan 2018 21:49:38 +0000</pubDate>
      
      <guid>/reference/operations/codedeploy_service_update/</guid>
      <description> TODO: Document the CodeDeployServiceUpdateDecorator decorator. See also the Deployment Strategy page.
 </description>
    </item>
    
    <item>
      <title>CI/CD</title>
      <link>/reference/operations/cicd/</link>
      <pubDate>Wed, 09 Mar 2016 19:56:50 +0100</pubDate>
      
      <guid>/reference/operations/cicd/</guid>
      <description> TODO: Document the SpartaCodePipeline example. Also see the Medium Post
 </description>
    </item>
    
    <item>
      <title>Deployment Strategies</title>
      <link>/reference/operations/deployment_strategies/</link>
      <pubDate>Wed, 09 Mar 2016 19:56:50 +0100</pubDate>
      
      <guid>/reference/operations/deployment_strategies/</guid>
      <description> Document the SpartaSafeDeploy example.
 </description>
    </item>
    
    <item>
      <title>Metrics Publisher</title>
      <link>/reference/operations/metrics_publisher/</link>
      <pubDate>Sat, 01 Dec 2018 06:02:32 +0000</pubDate>
      
      <guid>/reference/operations/metrics_publisher/</guid>
      <description>AWS Lambda is tightly integrated with other AWS services and provides excellent opportunities for improving your service&amp;rsquo;s observability posture. Sparta includes a CloudWatch Metrics publisher that periodically publishes metrics to CloudWatch.
This periodic task publishes environment-level metrics that have been detected by the gopsutil package. Metrics include:
 CPU  Percent used   Disk  Percent used   Host  Uptime (milliseconds)   Load  Load1 (no units) Load5 (no units) Load15 (no units)   Network  NetBytesSent (bytes) NetBytesRecv (bytes) NetErrin (count) NetErrout (count)    You can provide an optional map[string]string set of dimensions to which the metrics should be published.</description>
    </item>
    
    <item>
      <title>Profiling</title>
      <link>/reference/operations/profiling/</link>
      <pubDate>Wed, 09 Mar 2016 19:56:50 +0100</pubDate>
      
      <guid>/reference/operations/profiling/</guid>
      <description>One of Lambda&amp;rsquo;s biggest strengths, its ability to automatically scale across ephemeral containers in response to increased load, also creates one of its biggest problems: observability. The traditional set of tools used to identify performance bottlenecks are no longer valid, as there is no host into which one can SSH and interactively interrogate. Identifying performance bottlenecks is even more significant due to the Lambda pricing model, where idle time often directly translates into increased costs.</description>
    </item>
    
  </channel>
</rss>
